baseUrl: "https://data.masa.ai/api"
name: "Real-Time Data (Subnet 42)"
description: "Access real-time and indexed data from X/Twitter using live search and semantic similarity matching."
endpoints:
  - path: /search
    externalPath: /v1/search/live/twitter
    method: POST
    summary: "Initiate an asynchronous Twitter search job"
    description: "Starts a job on Bittensor Subnet 42 to search Twitter based on a query (supports advanced operators). Returns a job UUID which can be used to check status and retrieve results later. Specify 'max_results' to limit tweet count."
    auth:
      type: header
      key: "Authorization"
      value: "Bearer {{api-key}}"
    headers:
      Content-Type: application/json
    requestSchema:
      type: object
      properties:
        type:
          type: string
          description: "Data source type. 'twitter-scraper' uses API or credentials, 'twitter-api-scraper' uses API only, 'twitter-credential-scraper' uses credentials only."
          enum:
            [
              "twitter-scraper",
              "twitter-api-scraper",
              "twitter-credential-scraper",
            ]
          default: "twitter-scraper"
        arguments:
          type: object
          description: "Arguments specific to the search type."
          properties:
            type:
              type: string
              description: "Search method: 'searchbyquery' for live tweets, 'searchbyfullarchive' for historical tweets."
              enum: ["searchbyquery", "searchbyfullarchive"]
              default: "searchbyquery"
            query:
              type: string
              description: "Twitter search query. Supports advanced operators like 'from:user', 'since:YYYY-MM-DD'"
              default: ""
            max_results:
              type: integer
              description: "Maximum number of tweets to return (up to 100 for live, 500 for archive)"
              default: 100 # Default for live search
              minimum: 1
              maximum: 500 # Max for archive search
          required: [type, query] # Type and query required within arguments
      required: [type, arguments] # Top-level type and arguments object are required

  - path: /search/similarity/twitter
    externalPath: /v1/search/similarity/twitter
    method: POST
    summary: "Search Twitter with semantic similarity matching"
    description: "Performs semantic vector-based search on indexed Twitter content. Matches tweets based on meaning and context rather than exact keywords."
    auth:
      type: header
      key: "Authorization"
      value: "Bearer {{api-key}}"
    headers:
      Content-Type: application/json
    requestSchema:
      type: object
      properties:
        query:
          type: string
          description: "Semantic search query text"
        keywords:
          type: array
          description: "Optional filter keywords"
          items:
            type: string
        keyword_operator:
          type: string
          description: "Keyword filter operator"
          enum: ["and", "or"]
          default: "and"
        max_results:
          type: integer
          description: "Maximum number of results to return"
          default: 10
          minimum: 1
          maximum: 100
      required: ["query"]

  - path: /result
    externalPath: /v1/search/live/twitter/result/{jobUUID}
    method: GET
    summary: "Get the results of a completed Twitter search job"
    description: "Retrieves the collected tweets from a completed asynchronous Twitter search job on Subnet 42, using the job's unique UUID. Only works if the job status is 'completed'."
    auth:
      type: header
      key: "Authorization"
      value: "Bearer {{api-key}}"
    pathParams:
      - name: jobUUID
        description: "UUID of the search job"
        required: true
