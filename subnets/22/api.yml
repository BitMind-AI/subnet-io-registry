baseUrl: "https://api.desearch.ai"
name: "Search (Subnet 22)"
description: "Search across multiple data sources with AI-powered summarization."
endpoints:
  - path: /search
    externalPath: /desearch/ai/search
    method: POST
    summary: "Perform AI-powered search across multiple sources"
    description: "Conducts a search query across specified sources (web, hackernews, reddit, wikipedia, youtube, twitter, arxiv) using AI models from Subnet 22. Can filter by date and provide results as links only, links with summaries, or links with a final AI-generated summary."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    headers:
      Content-Type: application/json
    requestSchema:
      type: object
      properties:
        prompt:
          type: string
          description: "Search query text to run tools with"
        tools:
          type: array
          description: "List of search tools to use for fetching data"
          items:
            type: string
            enum:
              [
                "web",
                "hackernews",
                "reddit",
                "wikipedia",
                "youtube",
                "twitter",
                "arxiv",
              ]
            default: "web"
        model:
          type: string
          description: "Model to use for scraping"
          enum: ["NOVA", "ORBIT", "HORIZON"]
          default: "NOVA"
        date_filter:
          type: string
          description: "Time range filter for results"
          enum:
            [
              "PAST_24_HOURS",
              "PAST_2_DAYS",
              "PAST_WEEK",
              "PAST_2_WEEKS",
              "PAST_MONTH",
              "PAST_2_MONTHS",
              "PAST_YEAR",
              "PAST_2_YEARS",
            ]
          default: "PAST_WEEK"
        streaming:
          type: boolean
          description: "Whether to stream results"
          default: true
        result_type:
          type: string
          description: "The result type for the search"
          enum:
            ["ONLY_LINKS", "LINKS_WITH_SUMMARIES", "LINKS_WITH_FINAL_SUMMARY"]
          default: "LINKS_WITH_FINAL_SUMMARY"
        system_message:
          type: string
          description: "Custom system message to be used for the search"
      required: ["prompt", "tools", "model", "date_filter", "streaming"]

  - path: /search/links/web
    externalPath: /desearch/ai/search/links/web
    method: POST
    summary: "Search web sources (excluding X/Twitter) for links"
    description: "Searches specified web-based sources (web, hackernews, reddit, wikipedia, youtube, arxiv) for a query and returns a list of relevant links. Does not include X/Twitter results. Uses AI models from Subnet 22."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    headers:
      Content-Type: application/json
    requestSchema:
      type: object
      properties:
        prompt:
          type: string
          description: "Search query prompt"
        tools:
          type: array
          description: "List of tools to search with"
          items:
            type: string
            description: "Tool to use for searching"
            enum:
              ["web", "hackernews", "reddit", "wikipedia", "youtube", "arxiv"]
            default: "web"
        model:
          type: string
          description: "Model to use for scraping"
          enum: ["NOVA", "ORBIT", "HORIZON"]
          default: "NOVA"
      required: ["prompt", "tools"]

  - path: /search/links/twitter
    externalPath: /desearch/ai/search/links/twitter
    method: POST
    summary: "Search X/Twitter for links related to a query"
    description: "Searches X/Twitter specifically for links relevant to a given query using AI models from Subnet 22."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    headers:
      Content-Type: application/json
    requestSchema:
      type: object
      properties:
        prompt:
          type: string
          description: "Search query prompt"
        model:
          type: string
          description: "Model to use for scraping"
          enum: ["NOVA", "ORBIT", "HORIZON"]
          default: "NOVA"
      required: ["prompt"]

  - path: /twitter
    externalPath: /twitter
    method: GET
    summary: "Search X/Twitter for tweets matching a query"
    description: "Searches X/Twitter for tweets based on a query string. Allows filtering by user, date range, language, verification status, media type, and engagement metrics (retweets, replies, likes). Supports advanced X/Twitter query syntax."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    queryParams:
      - name: query
        description: "Search query. For syntax, check https://docs.datura.ai/guides/capabilities/twitter-queries"
        required: true
      - name: sort
        description: "Sort by Top or Latest"
        required: false
        enum: ["Top", "Latest"]
        default: Top
      - name: user
        description: "User to search for"
        required: false
      - name: start_date
        description: "Start date in UTC (YYYY-MM-DD format)"
        required: false
      - name: end_date
        description: "End date in UTC (YYYY-MM-DD format)"
        required: false
      - name: lang
        description: "Language code (e.g., en, es, fr)"
        required: false
      - name: verified
        description: "Filter for verified users"
        required: false
        type: boolean
      - name: blue_verified
        description: "Filter for blue checkmark verified users"
        required: false
        type: boolean
      - name: is_quote
        description: "Include only tweets with quotes"
        required: false
        type: boolean
      - name: is_video
        description: "Include only tweets with videos"
        required: false
        type: boolean
      - name: is_image
        description: "Include only tweets with images"
        required: false
        type: boolean
      - name: min_retweets
        description: "Minimum number of retweets"
        required: false
      - name: min_replies
        description: "Minimum number of replies"
        required: false
      - name: min_likes
        description: "Minimum number of likes"
        required: false
      - name: count
        description: "Number of tweets to retrieve"
        required: false
        default: 20
        minimum: 1
        maximum: 100

  - path: /twitter/urls
    externalPath: /twitter/urls
    method: GET
    summary: "Fetch details for specific X/Twitter tweet URLs"
    description: "Retrieves the full details (including user info, text, engagement counts) for one or more specific X/Twitter posts identified by their URLs."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    queryParams:
      - name: urls
        description: "List of urls that is to be retrieved"
        required: true
        type: array
        items:
          type: string

  - path: /twitter/post
    externalPath: /twitter/post
    method: GET
    summary: "Fetch details for a single X/Twitter tweet by ID"
    description: "Retrieves the full details for a single X/Twitter post identified by its unique tweet ID."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    queryParams:
      - name: id
        description: "Post ID to retrieve"
        required: true

  - path: /twitter/user/posts
    externalPath: /twitter/post/user
    method: GET
    summary: "Fetch tweets posted by a specific X/Twitter user"
    description: "Retrieves tweets posted by a specified X/Twitter username. Can optionally filter these tweets with a search query and limit the count."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    queryParams:
      - name: user
        description: "User to search for"
        required: true
      - name: query
        description: "Search query. For syntax, check https://docs.datura.ai/guides/capabilities/twitter-queries"
        required: false
        default: ""
      - name: count
        description: "Number of tweets to retrieve"
        required: false
        default: 10
        minimum: 1
        maximum: 100

  - path: /twitter/user/latest
    externalPath: /twitter/latest
    method: GET
    summary: "Fetch the latest tweets posted by a specific X/Twitter user"
    description: "Retrieves the most recent tweets posted by a specified X/Twitter username, up to a specified count."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    queryParams:
      - name: user
        description: "User to search for"
        required: true
      - name: count
        description: "Number of tweets to retrieve"
        required: false
        default: 10
        minimum: 1
        maximum: 100

  - path: /twitter/user/replies
    externalPath: /twitter/replies
    method: GET
    summary: "Fetch replies made by a specific X/Twitter user"
    description: "Retrieves tweets that are replies made by a specified X/Twitter username. Can optionally filter these replies with a search query and limit the count."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    queryParams:
      - name: user
        description: "The username of the user to search for"
        required: true
      - name: count
        description: "The number of tweets to fetch"
        required: false
        default: 10
        minimum: 1
        maximum: 100
      - name: query
        description: "Search query. For syntax, check https://docs.datura.ai/guides/capabilities/twitter-queries"
        required: false
        default: ""

  - path: /twitter/post/replies
    externalPath: /twitter/replies/post
    method: GET
    summary: "Fetch replies to a specific X/Twitter tweet"
    description: "Retrieves replies made to a specific X/Twitter post, identified by its tweet ID. Can optionally filter these replies with a search query and limit the count."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    queryParams:
      - name: post_id
        description: "The ID of the post to search for"
        required: true
      - name: count
        description: "The number of tweets to fetch"
        required: false
        default: 10
        minimum: 1
        maximum: 100
      - name: query
        description: "Search query. For syntax, check https://docs.datura.ai/guides/capabilities/twitter-queries"
        required: false
        default: ""

  - path: /twitter/post/retweets
    externalPath: /twitter/retweets/post
    method: GET
    summary: "Fetch retweets of a specific X/Twitter tweet"
    description: "Retrieves users who have retweeted a specific X/Twitter post, identified by its tweet ID. Can optionally filter these retweets with a search query and limit the count."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    queryParams:
      - name: post_id
        description: "The ID of the post to search for"
        required: true
      - name: count
        description: "The number of tweets to fetch"
        required: false
        default: 10
        minimum: 1
        maximum: 100
      - name: query
        description: "Search query. For syntax, check https://docs.datura.ai/guides/capabilities/twitter-queries"
        required: false
        default: ""

  - path: /twitter/user
    externalPath: /twitter/user
    method: GET
    summary: "Fetch profile information for a specific X/Twitter user"
    description: "Retrieves the profile details (ID, name, description, follower counts, etc.) for a specified X/Twitter username."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    queryParams:
      - name: user
        description: "User to search for"
        required: true

  - path: /web
    externalPath: /web
    method: GET
    summary: "Perform a standard web search"
    description: "Conducts a web search for a given query string and returns a specified number of results. Supports pagination using 'start' and 'num' parameters."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    queryParams:
      - name: query
        description: "The search query string"
        required: true
      - name: num
        description: "Count of results to get"
        required: true
        type: integer
      - name: start
        description: "How many results to skip (used for pagination with num)"
        required: true
        type: integer
        minimum: 1
        maximum: 100
