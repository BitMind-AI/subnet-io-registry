baseUrl: "https://subnet-api.bitmindlabs.ai"
name: "AI Detection (Subnet 34)"
description: "Detect AI-generated content with high accuracy, providing confidence scores and detailed analysis predictions."
endpoints:
  - path: /detect-image
    externalPath: /detect-image
    method: POST
    summary: "Detect AI-generated images"
    description: "Analyzes an image (provided as a URL or Base64 data) to determine if it was generated by AI. Returns a boolean prediction, confidence score, and similarity metrics. Uses models from Bittensor Subnet 34 with C2PA (Coalition for Content Provenance and Authenticity) analysis for enhanced authenticity verification."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    headers:
      Content-Type: application/json
    requestSchema:
      type: object
      properties:
        image:
          type: string
          description: >
            URL or Base64 encoded image.
            - For URLs: The image must be publicly accessible with a maximum download size of 512MB.
            - For Base64: The max size is 4MB. Supported MIME types: image/gif, image/jpeg, image/png, image/bmp, image/tiff.
        source:
          type: string
          description: Source URL of the content i.e. an X/Twitter post, link to a news article, etc.
      required: [image]
    responseSchema:
      type: object
      properties:
        isAI:
          type: boolean
          description: Indicates if the content is predicted to be AI-generated.
        confidence:
          type: number
          format: float
          description: Confidence score of the inference result.
        predictions:
          type: array
          items:
            type: number
            format: float
          description: List of prediction scores.
        similarity:
          type: number
          format: float
          description: Similarity to known AI-generated content.
        fqdn:
          type: string
          description: Fully qualified domain name of the validator that generated the inference result.

  - path: /detect-video
    externalPath: /detect-video
    method: POST
    summary: "Detect AI-generated videos"
    description: "Analyzes up to 144 frames of a video to determine if it contains AI-generated content. The video can be provided either as a file upload (multipart/form-data) or as a URL. Supports direct downloads from limited platforms including X and Facebook using yt-dlp. Provides an overall prediction and frame-by-frame analysis results. Uses models from Bittensor Subnet 34."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    headers:
      Content-Type: multipart/form-data
    requestSchema:
      type: object
      properties:
        video:
          type: file
          description: >
            Video file form data or direct URL.
            - Supported formats: mp4, mov, avi.
        startTime:
          type: number
          format: float
          description: Starting point in seconds for extraction (default 0).
        endTime:
          type: number
          format: float
          description: Ending point in seconds for extraction (default entire video).
        fps:
          type: integer
          description: Frames per second to use for analysis (default 24).
          default: 24
        rich:
          type: boolean
          description: Whether to include detailed analysis in the response.
          default: false
        source:
          type: string
          description: Source URL of the content i.e. an X/Twitter post, link to a news article, etc.
      required: [video]
    responseSchema:
      type: object
      properties:
        isAI:
          type: boolean
          description: Indicates if the video is predicted to be AI-generated.
        confidence:
          type: number
          format: float
          description: Overall confidence score of the inference result.
        frameResults:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: number
                format: float
                description: Timestamp of the analyzed frame in seconds.
              isAI:
                type: boolean
                description: Indicates if this frame is predicted to be AI-generated.
              confidence:
                type: number
                format: float
                description: Confidence score for this specific frame.
          description: Results for individual analyzed frames.
        similarity:
          type: number
          format: float
          description: Similarity to known AI-generated content.
        fqdn:
          type: string
          description: Fully qualified domain name of the validator that generated the inference result.

  - path: /preprocess-video
    externalPath: /preprocess-video
    method: POST
    summary: "Prepare video file for detection"
    description: "Processes and prepares a video for AI detection analysis. The video can be provided either as a file upload (multipart/form-data) or as a URL. Supports direct downloads from limited platforms including X and Facebook using yt-dlp. Converts the video to a browser-compatible format, extracts frames at specified intervals, and optionally generates thumbnail images. This endpoint is useful for pre-processing videos before sending them to the /detect-video endpoint."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    headers:
      Content-Type: multipart/form-data
    requestSchema:
      type: object
      properties:
        video:
          type: file
          description: >
            Video file form data or direct URL.
            - Supported formats: mp4, mov, avi.
        startTime:
          type: number
          format: float
          description: Starting point in seconds for extraction (default 0).
        endTime:
          type: number
          format: float
          description: Ending point in seconds for extraction (default entire video).
        fps:
          type: integer
          description: Frames per second to use for processing (default 24).
          default: 24
        generateThumbnails:
          type: boolean
          description: Whether to generate thumbnail images (default false).
          default: false
      required: [video]
    responseSchema:
      type: object
      properties:
        videoUrl:
          type: string
          description: URL for the browser-compatible processed video.
        thumbnailUrls:
          type: array
          items:
            type: string
          description: URLs for generated thumbnails (if requested).
        metadata:
          type: object
          properties:
            duration:
              type: number
              format: float
              description: Duration of the video in seconds.
            width:
              type: integer
              description: Width of the video in pixels.
            height:
              type: integer
              description: Height of the video in pixels.
            fps:
              type: number
              format: float
              description: Frames per second of the processed video.
          description: Video metadata information.

  - path: /get-video-upload-url
    externalPath: /get-video-upload-url
    method: POST
    summary: "Get presigned URL for uploading large video files"
    description: "Returns a presigned S3 URL that can be used to upload a video file directly to S3, bypassing API payload limits (useful for files larger than 6MB). After uploading to S3, the returned videoUrl can be used with the detect-video or preprocess-video endpoints. The presigned URL expires in 15 minutes and has a 200MB upload limit."
    auth:
      type: header
      key: "Authorization"
      value: "{{api-key}}"
    headers:
      Content-Type: application/json
    requestSchema:
      type: object
      properties:
        filename:
          type: string
          description: "The name of the file to upload (used to determine content type). Supported formats: mp4 (video/mp4), mov (video/quicktime), avi (video/x-msvideo), webm (video/webm). If extension is not recognized, defaults to video/mp4."
        contentType:
          type: string
          description: "(Optional) The content type of the file, if known. If not provided, it will be inferred from the filename extension. Common types: video/mp4, video/quicktime, video/x-msvideo, video/webm."
      required: ["filename"]
    responseSchema:
      type: object
      properties:
        url:
          type: string
          description: "The presigned URL to which the file should be uploaded with a POST request (expires in 15 minutes)."
        fields:
          type: object
          description: "Form fields to include with the POST request to the presigned URL."
        fileKey:
          type: string
          description: "The S3 key for the uploaded file (format: upload/timestamp-uuid-filename)."
        videoUrl:
          type: string
          description: "The URL to use with the detect-video or preprocess-video endpoints after uploading (S3 bucket URL)."
